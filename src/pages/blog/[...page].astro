---
import Image from '$core/components/image.astro'
import Pagination from '$modules/listing/components/pagination.astro'

import { getCollectionBlog } from '$core/services/getCollectionBlog'
import { serializeDate } from '$core/services/serializeDate'

import type { GetStaticPaths, Page } from 'astro'
import type { CollectionEntry } from 'astro:content'

import Navbar from '../../components/Navbar.astro'
import Footer from '../../components/Footer.astro'
import Layout from '../../components/layout.astro'

export interface Props {
  page: Page<CollectionEntry<'blog'>>
  featuredBlogPost: CollectionEntry<'blog'> | null
}

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const blogPosts = await getCollectionBlog()

  const pages = paginate(blogPosts, {
    pageSize: 6,
  })

  return pages.map((page, i) => ({
    props: {
      ...page.props,
      featuredBlogPost:
        i !== 0 ? null : blogPosts.find(o => o.data.featured === true) ?? null,
    },
    params: {
      page: i === 0 ? undefined : `pages/${i + 1}`,
    },
  }))
}

const { page, featuredBlogPost } = Astro.props
---

<Layout
  title="Blog"
  ,
  description="NB GEARS's Blog"
  ,
  image="/NR_Gear_logo_white.png"
  ,
/>
<div class="bg-white dark:bg-[#332940]">
  <Navbar />
  <div class="mx-auto mt-4 max-w-7xl gap-4 rounded-xl dark:bg-[#121212]">
    <div class="rounded-xl dark:bg-[#121212] sm:px-6 lg:px-8">
      {
        featuredBlogPost !== null && (
          <div class="mx-auto mb-6 max-w-4xl pt-6">
            <a href={`/blog/${featuredBlogPost.slug}`} rel="prefetch">
              <div class="relative overflow-hidden rounded-none sm:rounded-2xl">
                <div class="absolute bottom-0 left-0 right-0 top-0 z-10 flex items-end bg-black-overlay p-6 md:p-8">
                  <div class="space-y-0.5 text-white md:space-y-2">
                    <span class="text-base uppercase md:text-lg">Featured</span>
                    <h1 class="text-xl md:text-4xl">
                      {featuredBlogPost.data.title}
                    </h1>
                    <p class="text-sm md:text-xl">
                      {featuredBlogPost.data.subtitle}
                    </p>
                  </div>
                </div>
                <div>
                  <Image
                    src={featuredBlogPost.data.banner.url}
                    width={featuredBlogPost.data.banner.width}
                    height={featuredBlogPost.data.banner.height}
                    placeholder={featuredBlogPost.data.banner.placeholder}
                    alt={featuredBlogPost.data.title}
                    fetchPriority="high"
                  />
                </div>
              </div>
            </a>
          </div>
        )
      }
      <div class="grid grid-cols-1 items-center gap-8 sm:grid-cols-2">
        {
          page.data.map(({ data, slug }, i) => (
            <a href={`/blog/${slug}`} rel="prefetch">
              <div
                class="relative overflow-hidden rounded-none bg-white shadow-lg dark:bg-[#332940] sm:rounded-2xl"
                style={`view-transition-name: blog-${slug}`}
              >
                {data.draft && (
                  <span class="absolute z-10 rounded-br-2xl bg-black px-3 py-1.5 text-sm font-bold italic text-white">
                    DRAFT
                  </span>
                )}
                <div class="overflow-hidden">
                  <Image
                    alt={data.title}
                    src={data.banner.url}
                    width={data.banner.width}
                    height={data.banner.height}
                    placeholder={data.banner.placeholder}
                    loading={i === 0 ? null : 'lazy'}
                    fetchPriority="low"
                  />
                </div>
                <div class="p-4 sm:p-6">
                  <h1 class="text-2xl text-gray-900 dark:text-gray-50">
                    {data.title}
                  </h1>
                  <p class="pt-1 text-gray-600 dark:text-gray-200	">
                    Written by{' '}
                    <span class="font-medium text-gray-800 dark:text-gray-50 ">
                      {data.author}
                    </span>{' '}
                    on{' '}
                    <span class="font-medium text-gray-800 dark:text-gray-50">
                      {serializeDate(data.date)}
                    </span>
                  </p>
                  <p class="py-2 text-gray-600 dark:text-gray-100">
                    {data.subtitle}
                  </p>
                </div>
              </div>
            </a>
          ))
        }
      </div>
      <div class="pt-6">
        <Pagination
          current={page.currentPage}
          max={Math.ceil(page.total / 6)}
        />
      </div>
    </div><Footer />
  </div>
</div>
